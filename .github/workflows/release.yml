# .github/workflows/release.yml
name: Release Build

on:
  push:
    tags:
      - 'v*' # Trigger on tags like v1.0, v2.1.3

env:
  BIN_NAME: memalloc # Project name from Cargo.toml

jobs:
  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    permissions:
      contents: write # Grant permission to create releases
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true # Automatically generate release notes based on commits
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub automatically provides this

  build_release:
    name: Build Release Assets (${{ matrix.target }})
    needs: create_release # Run after release is created
    strategy:
      fail-fast: false # Allow other builds to continue if one fails
      matrix:
        include:
          # Linux GNU Builds (on Ubuntu runner using zigbuild)
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            asset_suffix: linux-gnu-amd64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            asset_suffix: linux-gnu-arm64
          # Linux MUSL Builds (on Ubuntu runner using zigbuild)
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            asset_suffix: linux-musl-amd64
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            asset_suffix: linux-musl-arm64
          # Windows Builds (on Ubuntu runner using zigbuild)
          - target: x86_64-pc-windows-gnu # Using GNU toolchain for Windows
            os: ubuntu-latest
            asset_suffix: windows-amd64.exe
          - target: aarch64-pc-windows-gnu # Using GNU toolchain for Windows
            os: ubuntu-latest
            asset_suffix: windows-arm64.exe
          # macOS Builds (on macOS runner)
          - target: x86_64-apple-darwin
            os: macos-latest
            asset_suffix: macos-amd64
          - target: aarch64-apple-darwin
            os: macos-latest
            asset_suffix: macos-arm64

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Install Rust toolchain (stable)
      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }} # Ensure the target is added to the toolchain

      # Install cargo-zigbuild for cross-compilation
      - name: Install cargo-zigbuild
        uses: taiki-e/install-action@cargo-zigbuild

      # Install zig (required by cargo-zigbuild)
      - name: Install zig
        uses: taiki-e/install-action@v2 # Use a specific version tag
        with:
          tool: zig # Specify the tool to install

      # Build using cargo-zigbuild
      - name: Build binary with cargo-zigbuild
        run: cargo zigbuild --release --target ${{ matrix.target }}

      # Prepare artifact path and name for upload
      - name: Prepare artifact details
        id: prepare_artifact
        shell: bash
        run: |
          ARTIFACT_DIR="target/${{ matrix.target }}/release"
          BINARY_NAME="${{ env.BIN_NAME }}"
          ASSET_NAME="${{ env.BIN_NAME }}-${{ matrix.asset_suffix }}" # e.g., memalloc-linux-gnu-amd64

          # Check if the target is Windows to find the .exe file
          if [[ "${{ matrix.target }}" == *"-windows-"* ]]; then
            # Rename the binary in the target dir first if needed (zigbuild might already name it .exe)
            if [[ -f "${ARTIFACT_DIR}/${BINARY_NAME}" && ! -f "${ARTIFACT_DIR}/${BINARY_NAME}.exe" ]]; then
              mv "${ARTIFACT_DIR}/${BINARY_NAME}" "${ARTIFACT_DIR}/${BINARY_NAME}.exe"
            fi
            ARTIFACT_PATH="${ARTIFACT_DIR}/${BINARY_NAME}.exe"
          else
            ARTIFACT_PATH="${ARTIFACT_DIR}/${BINARY_NAME}"
          fi

          echo "ARTIFACT_PATH=${ARTIFACT_PATH}" >> $GITHUB_OUTPUT
          echo "ASSET_NAME=${ASSET_NAME}" >> $GITHUB_OUTPUT
          echo "--- Listing artifact directory: ${ARTIFACT_DIR} ---"
          ls -l "${ARTIFACT_DIR}"
          echo "--- Determined artifact path: ${ARTIFACT_PATH} ---"
          echo "--- Determined asset name: ${ASSET_NAME} ---"


      # Upload the compiled binary to the GitHub Release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ steps.prepare_artifact.outputs.ARTIFACT_PATH }}
          asset_name: ${{ steps.prepare_artifact.outputs.ASSET_NAME }}
          asset_content_type: application/octet-stream # Standard type for binary files
